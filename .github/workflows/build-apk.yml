name: build-apk

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }}/${{ matrix.subtarget }} (${{ matrix.channel }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - channel: snapshots
            target: x86
            subtarget: 64
          # Use a valid ARM64 target path. aarch64/generic does not exist as such.
          # "armvirt/64" is a common generic ARM64 SDK target for building packages.
          - channel: snapshots
            target: armvirt
            subtarget: 64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-distutils \
            rsync unzip zlib1g-dev file wget curl xz-utils ca-certificates

      - name: Resolve and download SDK
        id: sdk
        env:
          CHANNEL: ${{ matrix.channel }}
          TARGET: ${{ matrix.target }}
          SUBTARGET: ${{ matrix.subtarget }}
          SDK_URL_OVERRIDE: ${{ matrix.sdk_url_override || '' }}
        run: |
          set -euo pipefail
          if [ -n "${SDK_URL_OVERRIDE}" ]; then
            BASE_URL="${SDK_URL_OVERRIDE}"
          else
            if [ "$CHANNEL" = "snapshots" ]; then
              if [ -n "${SUBTARGET}" ]; then
                BASE_URL="https://downloads.openwrt.org/snapshots/targets/${TARGET}/${SUBTARGET}/"
              else
                BASE_URL="https://downloads.openwrt.org/snapshots/targets/${TARGET}/"
              fi
            else
              # For releases, CHANNEL should be like 'releases/24.10.0'
              if [ -n "${SUBTARGET}" ]; then
                BASE_URL="https://downloads.openwrt.org/${CHANNEL}/targets/${TARGET}/${SUBTARGET}/"
              else
                BASE_URL="https://downloads.openwrt.org/${CHANNEL}/targets/${TARGET}/"
              fi
            fi
          fi
          echo "Base URL: $BASE_URL"
          # Find SDK tarball name (host toolchain for Linux x86_64)
          SDK_TARBALL=$(curl -fsSL "$BASE_URL" | grep -oE 'openwrt-sdk-[^" ]+Linux-x86_64.tar.xz' | head -n1)
          if [ -z "$SDK_TARBALL" ]; then
            echo "Could not resolve SDK tarball at $BASE_URL" >&2
            exit 1
          fi
          echo "SDK tarball: $SDK_TARBALL"
          curl -fSL "$BASE_URL$SDK_TARBALL" -o "$SDK_TARBALL"
          echo "tarball=$SDK_TARBALL" >> $GITHUB_OUTPUT
          echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT

      - name: Extract SDK
        run: |
          tar -xf "${{ steps.sdk.outputs.tarball }}"
          SDK_DIR=$(echo openwrt-sdk-*)
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV

      - name: Inject package sources
        run: |
          mkdir -p "$SDK_DIR/package/seaweedfs" "$SDK_DIR/package/luci-app-seaweedfs"
          rsync -a --delete ./seaweedfs/ "$SDK_DIR/package/seaweedfs/"
          rsync -a --delete ./luci-app-seaweedfs/ "$SDK_DIR/package/luci-app-seaweedfs/"

      - name: Build packages
        working-directory: ${{ env.SDK_DIR }}
        env:
          FORCE_UNSAFE_CONFIGURE: 1
        run: |
          set -euxo pipefail
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
          make package/seaweedfs/{clean,compile} V=s
          make package/luci-app-seaweedfs/{clean,compile} V=s

      - name: Collect artifacts
        run: |
          mkdir -p artifacts
          # Collect both apk and ipk just in case
          find "$SDK_DIR/bin" \( -name "*.apk" -o -name "*.ipk" \) -print -exec cp -v {} artifacts/ \;
          ls -l artifacts || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seaweedfs-packages-${{ matrix.target }}-${{ matrix.subtarget }}
          path: artifacts/*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
